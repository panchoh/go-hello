name: Release

on:
  push:
    tags:
      - v*.*.*
env:
  GO_VERSION: 1.14.4

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-go@v2
      id: setup-go
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check env
      run: |
        echo "$GO_VERSION"

    - name: Select custom release notes
      id: release-notes
      run: |
        RELNOTES="docs/release-notes/RELEASE-${GITHUB_REF#refs/tags/}.md"
        [[ -f "$RELNOTES" ]] && echo ::set-output name=ARGS::--release-notes $RELNOTES || true

    - name: Generate release signing key
      run: |
        SIGNER=$(gpg --batch --generate-key <<EOF 2>&1 | awk '/^gpg: key [A-Z0-9]* marked as ultimately trusted/ { print $3; exit }'
        %echo Generating a signing OpenPGP key
        %no-protection
        Key-Type: RSA
        Key-Length: 4096
        Key-Usage: sign
        Name-Real: Kapow! Release Bot
        Name-Comment: "${GITHUB_REF#refs/tags/}"
        Name-Email: pancho@pancho.name
        Expire-Date: 1y
        %echo done
        EOF
        )

        declare -a REVOKERS

        for revoker in .github/revokers/*
        do
          gpg --import "$revoker"
          FINGERPRINT=$(basename $revoker .gpg)
          REVOKERS+=($FINGERPRINT)
        done

        sudo apt install expect
        expect -f- "$SIGNER" "${REVOKERS[@]}" <<'EOF'
        set SIGNER [lindex $argv 0]
        set REVOKERS [lrange $argv 1 end]

        if { $SIGNER eq "" || 0 == [llength $REVOKERS] } {
          puts stderr "usage: addrevokers SIGNER_KEY REVOKER_KEY..."
          exit 1
        }

        spawn gpg --command-fd 0 --status-fd 1 --edit-key $SIGNER

        foreach REVOKER $REVOKERS {
          send "addrevoker\n"
          expect "GET_LINE keyedit.add_revoker"
          send "$REVOKER\n"
          expect "GET_BOOL keyedit.add_revoker.okay"
          send "y\n"
          expect "GET_LINE keyedit.prompt"
        }

        send "save\n"
        expect eof
        puts "Done."
        EOF

    - uses: goreleaser/goreleaser-action@v2
      with:
        args: release --rm-dist ${{ steps.release-notes.outputs.ARGS }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Remove GNUPGHOME
      run: |
        rm -rf ~/.gnupg
